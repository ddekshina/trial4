from datetime import datetime
from app import db

class Client(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    analyst_name = db.Column(db.String(120), nullable=False)
    name = db.Column(db.String(120), nullable=False)
    client_type = db.Column(db.String(50), nullable=False)
    country = db.Column(db.String(100))
    city = db.Column(db.String(100))
    currency = db.Column(db.String(10))
    industry_sector = db.Column(db.String(100))
    company_size = db.Column(db.Integer)
    annual_revenue = db.Column(db.Float)
    contact_name = db.Column(db.String(120))
    email = db.Column(db.String(120), nullable=False)
    phone = db.Column(db.String(50))
    has_bi_team = db.Column(db.Boolean)
    wants_bi_tool = db.Column(db.Boolean)
    will_provide_bi_projects = db.Column(db.Boolean)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    projects = db.relationship('Project', backref='client', lazy=True)

class Project(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    client_id = db.Column(db.Integer, db.ForeignKey('client.id'), nullable=False)
    title = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    business_objective = db.Column(db.Text)
    expected_deliverables = db.Column(db.JSON)
    subscription_plan = db.Column(db.String(100))
    target_audience = db.Column(db.JSON)
    data_sources = db.Column(db.JSON)
    data_volume = db.Column(db.String(50))
    api_details = db.Column(db.JSON)
    google_spreadsheet = db.Column(db.String(255))
    required_integrations = db.Column(db.JSON)
    interactivity = db.Column(db.JSON)
    user_access = db.Column(db.JSON)
    customization = db.Column(db.JSON)
    engagement_type = db.Column(db.String(50))
    support_plan = db.Column(db.String(50))
    start_date = db.Column(db.Date)
    end_date = db.Column(db.Date)
    delivery_model = db.Column(db.JSON)
    budget_range = db.Column(db.String(100))
    competitor_comparison = db.Column(db.Text)
    roi_expectations = db.Column(db.Text)
    tiered_pricing = db.Column(db.JSON)
    analyst_notes = db.Column(db.Text)
    suggested_pricing_model = db.Column(db.Text)
    risk_factors = db.Column(db.Text)
    next_steps = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    quote = db.relationship('Quote', backref='project', uselist=False)
    kanban_ticket = db.relationship('KanbanTicket', backref='project', uselist=False)
    demo_analysis = db.relationship('DemoBusinessAnalysis', backref='project', uselist=False)
    documents = db.relationship('Document', backref='project', lazy=True)

class Quote(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    base_price = db.Column(db.Float)
    widgets_price = db.Column(db.Float)
    data_sources_price = db.Column(db.Float)
    integrations_price = db.Column(db.Float)
    features_price = db.Column(db.Float)
    branding_price = db.Column(db.Float)
    support_price = db.Column(db.Float)
    hosting_price = db.Column(db.Float)
    total_price = db.Column(db.Float)
    currency = db.Column(db.String(10))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

class KanbanTicket(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    status = db.Column(db.String(50), default='Pricing Submissions')
    tags = db.Column(db.JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

class DemoBusinessAnalysis(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    analysis_type = db.Column(db.String(50))
    company_website = db.Column(db.String(255))
    use_case_description = db.Column(db.Text)
    reference_links = db.Column(db.JSON)
    attachments = db.Column(db.JSON)
    verticals = db.Column(db.JSON)
    custom_vertical = db.Column(db.String(100))
    demo_details = db.Column(db.JSON)
    client_suggestions = db.Column(db.Text)
    problem_statement = db.Column(db.Text)
    case_description = db.Column(db.Text)
    stakeholders = db.Column(db.Text)
    visualization_goal = db.Column(db.Text)
    resources_provided = db.Column(db.Text)
    documentation_status = db.Column(db.Text)
    support_team_available = db.Column(db.Boolean)
    mathematical_modeling = db.Column(db.Boolean)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class Document(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    project_id = db.Column(db.Integer, db.ForeignKey('project.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    filepath = db.Column(db.String(512), nullable=False)
    filetype = db.Column(db.String(50))
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)